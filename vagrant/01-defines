shurtcut vagrant 

vagrant init debian/9  ------------> buscar  en catalogo
vagrant up --> start vm vagrant
vagrant status ---> status vagrant
vagrant ssh --> connect ssh vagrant vm 

# User and password default 
user:vagrant 
pass:vagrant


vagrant halt -f -- > shutdown vagrant vm

vagrant suspend --> suspend vm 

vagrant destroy ----> delete vm 
vagrant destroy id vagrant --> delete vagrant v, by tag   

vagrant global-status

vagrant reload --- > reload vm

vagrant provision -- > provide vm

## vagrantFile 


config.vm.hostname = "miHostname"

config.vm.provider "virtualBox" do |vb|

vb.memory = "1024"
vb.cpus = "4"
vb.name = "myLinux"  




# Network 

config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"
Create a private network, which allows host-only access to the machine
using a specific IP.
config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

# Files

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"





# provision 

  # config.vm.provision "shell", inline: <<-SHELL
  #   apt-get update
  #   apt-get install -y apache2


config.vm.provision "shell", path:"script.sh"

using ansible:

config.vm.provision "ansible" do |ansible|
    ansible.playbook = "playbook.yml"

end



idenpotencia 


# boxes

vagrant box list
vagrant box remove id
vagrant box oudated

Create box.
vagrant package 

vagrant box add --name debian9-LAMP package.box 


 
# to vagrant cloud you have to upload package.box from your image










